{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "SMBX Tea",
	"scopeName": "source.smt",
	"patterns": [
		{
			"include": "#comment"
		},
		{
			"include": "#declare"
		},
		{
			"include": "#keywords"
		},
		{
			"include": "#expression"
		}
	],
	"repository": {
		"keywords": {
			"patterns": [
				{
					"include": "#support"
				},
				{
					"name": "keyword.control",
					"match": "\\b((((A|a)s)|((C|c)all)|((C|c)ase)|((D|d)im)|((E|e)lse(I|i)f)|((E|e)lse)|((E|e)nd)|((E|e)xport)|((F|f)or)|((G|g)o(T|t)o)|((G|g)o(S|s)ub)|((I|i)f)|((n|N)ext)|((R|r)eturn)|((S|s)cript)|((S|s)elect)|((S|s)tep)|((T|t)hen)|((T|t)o)|((W|w)hile)|((W|w)ith)|((D|d)o)|((L|l)oop))|((e|E)xit)|((G|g)o(S|s)ub)|((C|c)ontinue))\\b"
				}
			]
		},
		"support": {
			"patterns": [
				{
					"name": "keyword.support.buildin",
					"match": "\\b(((A|a)rray)|((G|g)Val)|((R|r)eDim)|((S|s)tr)|(v|V)|((V|v)al))\\b"
				}
			]
		},
		"strings": {
			"name": "string.quoted.double",
			"begin": "\"",
			"end": "\"",
			"patterns": [
				{
					"name": "constant.character.escape",
					"match": "\\\\."
				}
			]
		},
		"numeric": {
			"patterns": [
				{
					"name": "constant.numeric",
					"match": "\\b([0-9]+\\.?[0-9]*)\\b"
				}
			]
		},
		"comment": {
			"name": "comment.line",
			"patterns": [
				{
					"name": "comment.line",
					"match": "'.*$"
				}
			]
		},
		"buildin_type": {
			"patterns": [
				{
					"name": "storage.type",
					"match": "\\b(((I|i)nteger)|((D|d)ouble)|((L|l)ong)|((B|b)yte)|((S|s)tring)|((B|b)oolean))\\b"
				}
			]
		},
		"type": {
			"patterns": [
				{
					"include": "#buildin_type"
				},
				{
					"name": "entity.name.type",
					"match": "\\b[_a-zA-Z][_a-zA-Z0-9]*\\b"
				}
			]
		},
		"identifier": {
			"patterns": [
				{
					"name": "variable.name",
					"match": "\\b[_a-zA-Z][_a-zA-Z0-9]*\\b"
				}
			]
		},
		"operators": {
			"patterns": [
				{
					"name": "keyword.operator",
					"match": "([+\\-\\*/<=>\\?\\!.]|(\\b((M|m)od)\\b)|(\\b((A|a)nd)\\b)|\\b((O|o)r)\\b|\\b((N|n)ot)\\b|\\b((X|x)or)\\b|\\b((E|e)qv)\\b|\\b((I|i)mp)\\b)"
				}
			]
		},
		"expression_constant": {
			"patterns": [
				{
					"include": "#numeric"
				},
				{
					"include": "#strings"
				},
				{
					"include": "#operators"
				}
			]
		},
		"expression": {
			"patterns": [
				{
					"include": "#numeric"
				},
				{
					"include": "#strings"
				},
				{
					"include": "#call_function"
				},
				{
					"include": "#operators"
				},
				{
					"include": "#identifier"
				}
			]
		},
		"field": {
			"patterns": [
				{
					"name": "variable.name",
					"include": "[.]*\\.[_a-zA-Z][_a-zA-Z0-9]*"
				}
			]
		},
		"declare": {
			"patterns": [
				{
					"include": "#declare_variable"
				},
				{
					"include": "#declare_function"
				}
			]
		},
		"declare_variable": {
			"name": "meta.var.declare",
			"match": "(\\b(?:(?:D|d)im)\\s+)([_a-zA-Z][_a-zA-Z0-9]*)(\\s+(?:(?:A|a)s)\\s+)([_a-zA-Z][_a-zA-Z0-9]*\\b)(.*$)",
			"captures": {
				"1": {
					"name": "keyword.control.define"
				},
				"2": {
					"patterns": [
						{
							"include": "#identifier"
						}
					]
				},
				"3": {
					"name": "keyword.control.define.type"
				},
				"4": {
					"patterns": [
						{
							"include": "#type"
						}
					]
				},
				"5": {
					"patterns": [
						{
							"include": "#expression"
						},
						{
							"include": "#comment"
						}
					]
				}
			}
		},
		"declare_function": {
			"name": "meta.function.block",
			"begin": "(\\b(?:(?:(?:E|e)xport)\\s+)?(?:\\b(?:(?:S|s)cript)\\s+))([_a-zA-Z][_a-zA-Z0-9]*)(\\([\\s\\S]*\\))",
			"end": "(\\b(?:(?:E|e)nd)\\s+(?:(?:S|s)cript)\\b)",
			"beginCaptures": {
				"0": {
					"name": "declare.function.begin"
				},
				"1": {
					"name": "keyword.control.function"
				},
				"2": {
					"name": "entity.name.function",
					"patterns": [
						{
							"include": "#identifier"
						}
					]
				},
				"3": {
					"patterns": [
						{
							"include": "#declare_param"
						}
					]
				}
			},
			"endCaptures": {
				"0": {
					"name": "declare.function.end"
				},
				"1": {
					"name": "keyword.control.function"
				}
			},
			"patterns": [
				{
					"include": "#block"
				}
			]
		},
		"declare_param": {
			"patterns": [
				{
					"name": "meta.function.parameters",
					"begin": "\\(",
					"end": "\\)",
					"patterns": [
						{
							"include": "#declare_params_return"
						},
						{
							"include": "#declare_params_variable"
						}
					]
				}
			]
		},
		"declare_params_variable": {
			"name": "meta.var.declare",
			"begin": "([_a-zA-Z][_a-zA-Z0-9]*)(\\s+(?:A|a)s\\s+)([_a-zA-Z][_a-zA-Z0-9]*)([^,]*)",
			"end": "\\s*(\\,)",
			"beginCaptures": {
				"1": {
					"patterns": [
						{
							"include": "#identifier"
						}
					]
				},
				"2": {
					"name": "keyword.control.define.type"
				},
				"3": {
					"patterns": [
						{
							"include": "#type"
						}
					]
				},
				"4": {
					"name": "default",
					"patterns": [
						{
							"include": "#expression_constant"
						}
					]
				}
			}
		},
		"declare_params_return": {
			"name": "meta.return",
			"begin": "\\b((?:R|r)eturn)\\s+([_a-zA-Z][_a-zA-Z0-9]*)",
			"end": "\\)",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.function"
				},
				"2": {
					"patterns": [
						{
							"include": "#type"
						}
					]
				}
			}
		},
		"call_function": {
			"name": "meta.function.call.params",
			"begin": "([_a-zA-Z][_a-zA-Z0-9]*)\\(",
			"end": "\\)",
			"beginCaptures": {
				"0": {
					"name": "function.call.start"
				},
				"1": {
					"name": "entity.name.function.call"
				}
			},
			"endCaptures": {
				"0": {
					"name": "function.call.end"
				}
			},
			"patterns": [
				{
					"patterns": [
						{
							"include": "#call_param"
						}
					]
				}
			]
		},
		"call_param": {
			"name": "meta.function.call.param",
			"begin": "\\s*",
			"end": "(?![^\\)])|,",
			"patterns": [
				{
					"include": "#expression"
				}
			]
		},
		"block": {
			"name": "meta.block",
			"patterns": [
				{
					"include": "#comment"
				},
				{
					"include": "#declare_variable"
				},
				{
					"include": "#keywords"
				},
				{
					"include": "#expression"
				}
			]
		}
	}
}